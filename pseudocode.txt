

The Pseudocode Programming Process, in brief
First: define your prerequisites
This is your pre-pseudocode preparatory work. You should consider:

what is the problem that the routine will solve?
is the job of the routine well-defined, and does it fit cleanly into the overall design?
what are the inputs, outputs, preconditions and postconditions?
what will you call your routine? Make sure it’s clear and unambiguous
how will you test your routine?
can you re-use functionality from standard or third-party libraries?
what could possibly go wrong, and how will you handle errors?
Next: design the routine in pseudocode
Now you can make your wireframe. During this stage you must resist the temptation, however hard it is, to write any code. You will really want to, but do not start writing any real code. The idea here is to get a high-level framework in place. If you start writing code, you are going to start worrying prematurely about implementation details. Instead you should:

write in pseudocode, starting off from the general control flow and then get gradually more specific
use precise, language-agnostic English (or your preferred human language)
try out a few ideas, and pick the best one
back up and think how you’d explain it to someone else
keep refining until it feels like a waste of time not to write real code
Finally: write real code
The time has come to write real code! What a relief.

fill in the code below each comment, and use the pseudocode as higher level comments if you like
mentally check whether any further refactoring is needed
mentally check for errors
test out the code for real, and fix any errors
repeat as needed, going back to pseudocode if need be



Examples:

1.. If student's grade is greater than or equal to 60

Print "passed"
else
Print "failed"
2. Set total to zero

Set grade counter to one

While grade counter is less than or equal to ten

Input the next grade
Add the grade into the total
Set the class average to the total divided by ten

Print the class average.

3.

Initialize total to zero

Initialize counter to zero

Input the first grade

while the user has not as yet entered the sentinel

add this grade into the running total
add one to the grade counter
input the next grade (possibly the sentinel)
if the counter is not equal to zero

set the average to the total divided by the counter
print the average
else

print 'no grades were entered'
4.

initialize passes to zero

initialize failures to zero

initialize student to one

while student counter is less than or equal to ten

input the next exam result
if the student passed
add one to passes
else

add one to failures
add one to student counter

print the number of passes

print the number of failures

if eight or more students passed

print "raise tuition"
Some Keywords That Should be Used

For looping and selection, The keywords that are to be used include Do While...EndDo; Do Until...Enddo; Case...EndCase; If...Endif; Call ... with (parameters); Call; Return ....; Return; When; Always use scope terminators for loops and iteration.
As verbs, use the words Generate, Compute, Process, etc. Words such as set, reset, increment, compute, calculate, add, sum, multiply, ... print, display, input, output, edit, test , etc. with careful indentation tend to foster desirable pseudocode.

Do not include data declarations in your pseudocode.